DB setup
========
1. Install Postgresql 9.x
2. Create database: bookrepo
3. Change datasource setting properly in application.properties:
- host
- port
- dbname
- username
- password

spring.datasource.url= jdbc:postgresql://localhost:5434/bookrepo
spring.datasource.username= postgres
spring.datasource.password= secretpass
spring.datasource.driver-class-name= org.postgresql.Driver
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL94Dialect

4. Add this to treat lobs properly in Postgresql
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

5. Before 1st run put:
spring.jpa.hibernate.ddl-auto = create-drop
App will create scheme in DB

6. Run app.

7. Execute ./src/main/resources/data.sql

8. After 1st run change property value to "update": 
spring.jpa.hibernate.ddl-auto = update
otherwise you will loss all your data in db.

Application
=========== 
1. Clone or save project from github:
https://github.com/spvolin/bookrepo

2. In project dir:
Build package:
> mvn clean package
Run app: 
> java -jar target\bookrepo-1.3.0.jar   

3. Go to browser at http://localhost:8082/
4. Signup
5. Signin
6. Do some CRUD ops with books:
- create a book with or w/o files uploads (multiple files upload allowed)
- update a book with or w/o files
- delete a book with files
- filter books by Author|Title|ISBN
- download a file of a book
- delete a file of a book

That's all folk!)

7. To look at REST controller spec open browser at http://localhost:8082/swagger-ui.html

Ref.
http://websystique.com/spring-boot/spring-boot-angularjs-spring-data-jpa-crud-app-example/
https://www.callicoder.com/spring-boot-file-upload-download-jpa-hibernate-mysql-database-example/
https://www.callicoder.com/spring-boot-spring-security-jwt-mysql-react-app-part-2/
https://jasonwatmore.com/post/2016/04/05/angularjs-jwt-authentication-example-tutorial#login-index-view